(()=>{"use strict";var e,t,r,n,o,l,i,a,g={861:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.displayToChat=void 0,t.displayToChat=function(e){PluginAPI.displayToChat({msg:e})}},447:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.MeteorXfailure=t.MeteorXsuccess=t.MeteorXerror=t.MeteorXwarning=t.MeteorXlog=void 0;var n=r(861);t.MeteorXlog=function(e){(0,n.displayToChat)("Â§c[Â§6MeteorXÂ§c]Â§f "+e)},t.MeteorXwarning=function(e){(0,n.displayToChat)("Â§c[Â§6Â§lWARNINGÂ§c]Â§f "+e)},t.MeteorXerror=function(e){(0,n.displayToChat)("Â§c[Â§4Â§lERRORÂ§c]Â§f "+e)},t.MeteorXsuccess=function(e){(0,n.displayToChat)("Â§a[Â§2Â§lSUCCESSÂ§a]Â§f "+e)},t.MeteorXfailure=function(e){(0,n.displayToChat)("Â§c[Â§4Â§lFAILUREÂ§c]Â§f "+e)}},39:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.registercmds=void 0;var n=r(194),o=r(447),l=null;t.registercmds=function(){PluginAPI.addEventListener("packetjoingame",(function(e){l=e.ip})),PluginAPI.addEventListener("sendchatmessage",(function(e){if(".version"===e.message&&((0,o.MeteorXlog)("you are currently using the v1.0 version of MeteorX."),e.preventDefault=!0),".help"===e.message&&((0,o.MeteorXlog)("MeteorX commands : .version , .help , .ip , .uwuify "),e.preventDefault=!0),".ip"===e.message&&((0,o.MeteorXlog)("the ip of the current server you are playing: "+l+" "),e.preventDefault=!0),".uwuify"===e.message&&((0,o.MeteorXlog)("usage: .uwuify [message]"),e.preventDefault=!0),e.message.startsWith(".uwuify ")){var t=e.message.split(".uwuify ").pop(),r=(0,n.uwuify)(t);PluginAPI.network.sendPacketChatMessage({messageIn:r})}}))}},481:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnFullbrightToggle=t.setFullbrightToggle=t.registerFullbright=void 0;var r=!1;t.registerFullbright=function(){PluginAPI.addEventListener("update",(function(){0==r?(PluginAPI.blocks.air.lightValue=0,PluginAPI.blocks.air.reload()):(PluginAPI.blocks.air.lightValue=10,PluginAPI.blocks.air.reload())}))},t.setFullbrightToggle=function(e){r=e},t.returnFullbrightToggle=function(){return r}},906:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.registergui=void 0;var n=r(771),o=r(74),l=r(419),i=r(481),a=r(3);t.registergui=function(){var e=!1;function t(){document.getElementById("myGui")&&document.getElementById("myGui").remove(),e=!1}window.addEventListener("keydown",(function(r){"Shift"===r.key&&r.location===KeyboardEvent.DOM_KEY_LOCATION_RIGHT&&(e?t():function(){t();var r=document.createElement("gui");if(null!=document.pointerLockElement){document.exitPointerLock(),r.innerHTML='\n        <gui id="myGui" style="width: 100%;height: 100%;position: fixed;top: 0px;left: 0px;z-index: 10;color: white;font-family: Minecraftia, sans-serif;overflow: hidden scroll;background-color: rgba(80, 80, 80, 0.42);background-blend-mode: multiply;background-size: 64px;">\n        <h1 style="text-shadow: 0px 0px 4px;">MeteorX GUI</h1>\n        <p style="font-size: 0.8rem; color: yellow;">(totally not stolen from plugin manager\'s gui)</p><p style="font-size: 0.8rem; color: yellow;">ik the gui looks kinda bad for a hacked client but its meteorX alpha ig. i WILL update this gui in the future</p><p style="font-size: 0.8rem; color: orangered;">click on "Activate" to activate a hack and click on "Deactivate" to deactivate a hack</p>\n        <table style="table-layout: fixed; width: 100%;">\n            <tbody><tr style="background: rgb(80, 80, 80);">\n                <th style="text-align: center;">Hacks</th>\n                <th style="text-align: center; width: 15%;">Activate/Deactivate</th>\n            </tr>\n            <tr style="box-shadow: grey 0px 2px 0px;">\n                <td style="user-select: text;background-color: #9d00ff30;">Jetpack (hold space to fly) ðŸŽ’ðŸ’¨</td>\n                <td style="background-color: gray; text-align: center;" id="jetpack">Activate</td>\n            </tr>\n            <tr style="box-shadow: grey 0px 2px 0px;">\n                <td style="user-select: text;background-color: #9d00ff30;">Step</td>\n                <td style="background-color: gray; text-align: center;" id="step">Activate</td>\n            </tr>\n            <tr style="box-shadow: grey 0px 2px 0px;">\n                <td style="user-select: text;background-color: #9d00ff30;">Spider</td>\n                <td style="background-color: gray; text-align: center;" id="spider">Activate</td>\n            </tr>\n            <tr style="box-shadow: grey 0px 2px 0px;">\n                <td style="user-select: text;background-color: #9d00ff30;">Nofall</td>\n                <td style="background-color: gray; text-align: center;" id="nofall">Activate</td>\n            </tr>\n            <tr style="box-shadow: grey 0px 2px 0px;">\n                <td style="user-select: text;background-color: #9d00ff30;">Fullbright</td>\n                <td style="background-color: gray; text-align: center;" id="fullbright">Activate</td>\n            </tr>\n            \x3c!-- <tr style="box-shadow: grey 0px 2px 0px;"> --\x3e\n            \x3c!-- <td style="user-select: text;background-color: #9d00ff30;">NoWeb</td> --\x3e\n            \x3c!-- <td style="background-color: gray; text-align: center;" id="noweb">Activate</td> --\x3e\n            \x3c!-- </tr> --\x3e\n            \x3c!--removed bc it dosnt work --\x3e\n            \x3c!-- will add later if its fixed --\x3e\n        </tbody></table>\n        <a style="background: transparent; text-align: center; color: yellow; cursor: pointer; font-family: Minecraftia, sans-serif; text-decoration: underline; border: 0px; margin-right: 1rem; font-size: 1rem;" href="https://github.com/radmanplays/MeteorX/issues/new" target="_blank">suggest a new feature/hack</a>\n        <a style="background: transparent;text-align: center;color: orange;cursor: pointer;font-family: Minecraftia, sans-serif;text-decoration: underline;border: 0px;font-size: 1rem;" href="https://github.com/orgs/EaglerReborn/discussions/9" target="_blank">version Roadmap</a>\n        \n          </gui>\n        ',r.id="myGui",r.style.width="100%",r.style.height="100%",r.style.position="fixed",r.style.top="0px",r.style.left="0px",r.style.zIndex="10",r.style.color="white",r.style.fontFamily="Minecraftia, sans-serif",r.style.overflow="hidden scroll",r.style.backgroundColor="rgba(80, 80, 80, 0.42)",r.style.backgroundBlendMode="multiply",r.style.backgroundSize="64px",document.body.appendChild(r),e=!0;var g=document.getElementById("jetpack"),u=document.getElementById("step"),s=document.getElementById("spider"),d=document.getElementById("nofall"),c=document.getElementById("fullbright");g.addEventListener("mouseover",(function(){g.style.cursor="pointer"})),u.addEventListener("mouseover",(function(){u.style.cursor="pointer"})),s.addEventListener("mouseover",(function(){s.style.cursor="pointer"})),d.addEventListener("mouseover",(function(){d.style.cursor="pointer"})),c.addEventListener("mouseover",(function(){c.style.cursor="pointer"})),!1===(0,a.returnjetpacktoggle)()&&(g.innerText="Activate",g.style.backgroundColor="green"),!1===(0,n.returnStepToggle)()&&(u.innerText="Activate",u.style.backgroundColor="green"),!1===(0,o.returnSpiderToggle)()&&(s.innerText="Activate",s.style.backgroundColor="green"),!1===(0,l.returnNofallToggle)()&&(d.innerText="Activate",d.style.backgroundColor="green"),!1===(0,i.returnFullbrightToggle)()&&(c.innerText="Activate",c.style.backgroundColor="green"),!0===(0,a.returnjetpacktoggle)()&&(g.innerText="Deactivate",g.style.backgroundColor="red"),!0===(0,n.returnStepToggle)()&&(u.innerText="Deactivate",u.style.backgroundColor="red"),!0===(0,o.returnSpiderToggle)()&&(s.innerText="Deactivate",s.style.backgroundColor="red"),!0===(0,l.returnNofallToggle)()&&(d.innerText="Deactivate",d.style.backgroundColor="red"),!0===(0,i.returnFullbrightToggle)()&&(c.innerText="Deactivate",c.style.backgroundColor="red"),u.addEventListener("click",(function(){!0!==(0,n.returnStepToggle)()?(u.innerText="Deactivate",u.style.backgroundColor="red",(0,n.setStepToggle)(!0)):(u.innerText="Activate",u.style.backgroundColor="green",(0,n.setStepToggle)(!1))})),s.addEventListener("click",(function(){!0!==(0,o.returnSpiderToggle)()?(s.innerText="Deactivate",s.style.backgroundColor="red",(0,o.setSpiderToggle)(!0)):(s.innerText="Activate",s.style.backgroundColor="green",(0,o.setSpiderToggle)(!1))})),d.addEventListener("click",(function(){!0!==(0,l.returnNofallToggle)()?(d.innerText="Deactivate",d.style.backgroundColor="red",(0,l.setNofallToggle)(!0)):(d.innerText="Activate",d.style.backgroundColor="green",(0,l.setNofallToggle)(!1))})),c.addEventListener("click",(function(){!0!==(0,i.returnFullbrightToggle)()?(c.innerText="Deactivate",c.style.backgroundColor="red",(0,i.setFullbrightToggle)(!0)):(c.innerText="Activate",c.style.backgroundColor="green",(0,i.setFullbrightToggle)(!1))})),g.addEventListener("click",(function(){!0!==(0,a.returnjetpacktoggle)()?(g.innerText="Deactivate",g.style.backgroundColor="red",(0,a.setjetpacktoggle)(!0)):(g.innerText="Activate",g.style.backgroundColor="green",(0,a.setjetpacktoggle)(!1))}))}}()),"Escape"!==r.key&&"`"!==r.key||t()}))}},3:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnjetpacktoggle=t.setjetpacktoggle=t.registerjetpack=void 0;var r=!1;t.registerjetpack=function(){PluginAPI.require("player");var e=!1;window.addEventListener("keydown",(function(t){" "===t.key.toLowerCase()&&(e=!0)})),window.addEventListener("keyup",(function(t){" "===t.key.toLowerCase()&&(e=!1)})),PluginAPI.addEventListener("update",(function(){if(1==r&&null!=document.pointerLockElement){if(!e)return;PluginAPI.player.motionY+=.2,PluginAPI.player.reload()}}))},t.setjetpacktoggle=function(e){r=e},t.returnjetpacktoggle=function(){return r}},419:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnNofallToggle=t.setNofallToggle=t.registerNofall=void 0;var r=!1;t.registerNofall=function(){PluginAPI.require("network"),PluginAPI.addEventListener("update",(function(){PluginAPI.player.fallDistance>2&&r&&PluginAPI.network.sendPacketPlayer({isOnGround:!0})}))},t.setNofallToggle=function(e){r=e},t.returnNofallToggle=function(){return r}},152:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnnowebToggle=t.setnowebToggle=t.registernoweb=void 0;var r=!1;t.registernoweb=function(){PluginAPI.require("player"),PluginAPI.addEventListener("update",(function(){1==r&&(PluginAPI.player.isInWeb=!1)}))},t.setnowebToggle=function(e){r=e},t.returnnowebToggle=function(){return r}},74:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnSpiderToggle=t.setSpiderToggle=t.registerSpider=void 0;var r=!1;t.registerSpider=function(){PluginAPI.require("player"),PluginAPI.addEventListener("update",(function(){PluginAPI.player.isCollidedHorizontally&&1==r&&(PluginAPI.player.motionY=.2,PluginAPI.player.reload())}))},t.setSpiderToggle=function(e){r=e},t.returnSpiderToggle=function(){return r}},771:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnStepToggle=t.setStepToggle=t.registerStep=void 0;var r=!1;t.registerStep=function(){PluginAPI.addEventListener("update",(function(){1==r?(PluginAPI.player.stepHeight=1,PluginAPI.player.reload()):(PluginAPI.player.stepHeight=.5,PluginAPI.player.reload())}))},t.setStepToggle=function(e){r=e},t.returnStepToggle=function(){return r}},194:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.uwuify=void 0,t.uwuify=function(e){e.toLowerCase().replace(/r|l/g,"w").replace(/n([aeiou])/g,"ny$1").replace(/ove/g,"uve").replace(/uck/g,"uwq").replace(/^i/,"i-i").replace(/(.*)i-i-i/,"$1i-i"),Math.random()}}},u={};function s(e){var t=u[e];if(void 0!==t)return t.exports;var r=u[e]={exports:{}};return g[e](r,r.exports,s),r.exports}e=s(906),t=s(74),r=s(771),n=s(419),o=s(3),l=s(481),i=s(39),a=s(152),console.log("[MeteorX] Loading client..."),(0,i.registercmds)(),(0,a.registernoweb)(),(0,e.registergui)(),(0,o.registerjetpack)(),(0,t.registerSpider)(),(0,r.registerStep)(),(0,n.registerNofall)(),(0,l.registerFullbright)(),console.log("[MeteorX] Finished loading client!")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,